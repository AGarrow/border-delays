$(document).ready( function(){
  var d = new Date();
  var today = d.getDay();
  var wday = d.getDay();
  var chart_bound = 'canada';
  var chart_commercial = false;
  var chart_wday = d.getDay();
  var chart_title;
  var chart_crossing;

  toggle_bound_button();

  $(".state").click(function(){
    $("body").data('state', $(this).attr('data'));
    $('.state').removeClass('active');
    $(this).addClass('active');
    filter_crossings();
  });

  $(".province").click(function(){
    $("body").data('province', $(this).attr('data'));
    $(".province").removeClass('active');
    $(this).addClass('active');
    filter_crossings();    
  });


  $(".day_select").click(function(){
    var clicked_button = $(this);
    $(".day_select").removeClass('active');
    clicked_button.addClass('active');
    chart_wday = clicked_button.attr('value');
    set_legend_text();
    requestData();
  });

  function filter_crossings(){
    var state = $("body").data('state');
    var province = $("body").data('province');
    $.get("filter_crossings", {state: state, province: province}, function(data){
      populate_crossings(data);
    });
  }


  var usa_icon = $("#us_icon");
  var canada_icon = $("#canada_icon");
  function toggle_bound_button(){
    var bound_button = $("#bound_button");
    var click_bound;
    if(chart_bound == 'canada'){
      $(".origin").html(usa_icon);
      $(".destination").html(canada_icon);
      click_bound = 'usa'
    }
    else{
      $(".origin").html(canada_icon);
      $(".destination").html(usa_icon);
      click_bound = 'canada'
    }
    bound_button.click(function(){
      bound_button.unbind();
      chart_bound = click_bound;
      requestData();
      toggle_bound_button();
    });
  };

  function set_legend_text(){
    var legend = $("#legend-recent");
    if(chart_wday == today){
      legend.text(" Today");
    }
    else{
      var weekday = $(".day_select.active").text()
      legend.text(" last "+weekday);
    }
  }

  function populate_crossings(data){
    $("#crossings").html("");
    if(data.length == 0){
      $("#crossings").append("<h4 class=\"list-group-item-heading\"> Sorry </h4> <p class=\"list-group-item-text\"> There are no crossings between this provicne and state </p> ");
    }
    $.each(data, function(i, crossing){
      var list_div = "<a href=\"#\" data-id="+crossing['id']+" class=\"list-group-item crossing-selector\">\
      <p class=\"list-group-item-text\"><b>"+crossing['title']+'</b></p>'+'<p class=\"list-group-item-text\">'+crossing['location']+"</p></a>";

      $("#crossings").append(list_div);
    });
    $(".crossing-selector").click(function(){
      $(".alert").remove();
      $('.list-group-item').removeClass('active');
      $(this).addClass("active");
      chart_crossing = $(this).data('id');
      requestData( $(this).data('id'), 'canada', false, wday);
    });
  }

  function requestData(){
    <% url = BorderTimes::Application.routes.url_helpers %>
    $.ajax({
      url: "<%= url.chart_data_path %>",
      type: "Get",
      dataType: "json",
      data: {
        bound: chart_bound, 
        id: chart_crossing,
        commercial: chart_commercial,
        wday: chart_wday
      },
      success: function(response, textStatus, xhr) {
        drawChart(response);
      }
    })
  }
  // var canvas = document.getElementById('chart');
  // var ctx = canvas.getContext("2d");
  // var chart = new Chart(ctx);

  function drawChart(response){
    d3.select("svg").selectAll("*").remove()

    var format = d3.time.format("%H"),
      bisectTime = d3.bisector(function(d) { return d; }).left;

    var chart_elem = d3.select("#chart"),
      WIDTH = $(".list-group-item")[0].offsetWidth,
      HEIGHT = 500,
      MARGINS = {
        top: 20,
        right: 20,
        bottom: 20,
        left: 50
      },

    xScale = d3.time.scale()
      .range([MARGINS.left, WIDTH - MARGINS.right])
      .domain([format.parse("0"), format.parse("23")]);
    yScale = d3.scale.linear()
      .range([HEIGHT - MARGINS.top, MARGINS.bottom])
      .domain([0,d3.max([d3.max(response.data.average), d3.max(response.data.recent)]) + 10]);

    d3.select("svg").attr("width", WIDTH).attr("height", HEIGHT)

    xAxis = d3.svg.axis().scale(xScale).ticks(12).tickFormat(d3.time.format("%I %p"));
    yAxis = d3.svg.axis().scale(yScale).orient("left").tickSize(-WIDTH, 0, 0);
    chart_elem.append("svg:g")
      .attr("transform", "translate(0,"+ (HEIGHT - MARGINS.bottom) + ")")
      .attr("class", "grid")
      .call(xAxis);
    chart_elem.append("svg:g")
      .attr("class", "grid")
      .attr("transform", "translate(" + (MARGINS.left) + ",0"+")")
      .call(yAxis);

    chart_elem.append("text")
      .attr("class", "y chart-label")
      .attr("text-anchor", "end")
      .attr("font-size", "13px")
      .attr("y", 0)
      .attr("dy", ".75em")
      .attr("x", -(HEIGHT+MARGINS.top+MARGINS.bottom)/2)
      .attr("dx", ".75em")
      .attr("transform", "rotate(-90)")
      .text("Delay (Minutes)");

    chart_elem.append("text")
      .attr("class", "x chart-label")
      .attr("text-anchor", "end")
      .attr("font-size", "13px")
      .attr("y", -HEIGHT+20)
      .attr("dy", ".75em")
      .text("Delay (Minutes)");

    var area = d3.svg.area().interpolate("basis")
      .x( function(d, i) { return xScale( format.parse(i.toString())) })
      .y0(HEIGHT - 20)
      .y1( function(d) { return yScale(d) });


    var line = d3.svg.line().interpolate("basis")
      .x( function(d, i) { return xScale( format.parse(i.toString()) ) })
      .y( function(d) { return yScale(d) });



    chart_elem.append("g").selectAll("path")
      .data([response.data.average])
      .enter()
        .append("path")
        .attr("d", line)
        .attr("fill", "none")
        .attr("stroke" , "#B20000")
        .attr("stroke-width", 4);

    chart_elem.append("path")
      .data([response.data.average])
      .attr("fill", "red")
      .attr("opacity", 0.5)
      .attr("d", area);

    chart_elem.append("path")
      .data([response.data.recent])
      .attr("fill", "blue")
      .attr("opacity", 0.7)
      .attr("d", area);

    chart_elem.append("g").selectAll("path")
      .data([response.data.recent])
      .enter()
        .append("path")
        .attr("d", line)
        .attr("fill", "none")
        .attr("stroke" , "#0000B2")
        .attr("stroke-width", 4);


    var focus = chart_elem.append("g")
        .attr("class", "focus")
        .style("display", "none");

    focus.append("circle")
        .attr("r", 4.5);

    focus.append("text")
        .attr("x", 9)
        .attr("dy", ".35em");


    chart_elem.append("rect")
          .attr("class", "overlay")
          .attr("width", WIDTH)
          .attr("height", HEIGHT)
          .on("mouseover", function() { focus.style("display", null); })
          .on("mouseout", function() { focus.style("display", "none"); })
          .on("mousemove", mousemove);

      function mousemove() {
        var x0 = xScale.invert(d3.mouse(this)[0].toString()),
            i = bisectTime(response.data.average, x0, 1),
            d0 = response.data.average[i - 1],
            d1 = response.data.average[i],
            d = x0 - d0 > d1 - x0 ? d1 : d0;
        focus.attr("transform", "translate(" + xScale(d.toString()) + "," + yScale(d) + ")");
        focus.select("text").text("time");
      }

    
    // data = {
    //   labels: response.data.labels,
    //   datasets: [
    //     {
    //       fillColor : "rgba(220,220,220,0.5)",
    //       strokeColor : "rgba(220,220,220,1)",
    //       pointColor : "rgba(220,220,220,1)",
    //       pointStrokeColor : "#fff",
    //       data : response.data.average
    //     },

    //     {
    //     fillColor : "rgba(151,187,205,0.5)",
    //     strokeColor : "rgba(151,187,205,1)",
    //     pointColor : "rgba(151,187,205,1)",
    //     pointStrokeColor : "#fff",
    //     data : response.data.recent
    //     } 
    //   ]
    // }

    // options = {
    //   scaleOverride : true,
    //   scaleSteps : 6,
    //   scaleStepWidth : 10,
    //   scaleStartValue : 0,
    //   scaleFontSize: 8,
    //   pointDot: false,
    //   pointHitDetectionRadius : 20,
    // }
    document.getElementById('chart-container').style.display = "block";
    // $("#chart-title").html(response.title)
    // if(response.message && $(".alert").length == 0){
    //   $("#crossings").append("<div class=\"alert alert-danger\" role=\"alert\">"+response.message+"</div>");      
    // }
    // var bound = (response.bound=="canada")? "United States --> Canada" : "Canada --> United States";
    // $("#bound").html(bound);
    // var canvas = document.getElementById("chart");
    // chart.Line(data, options);    
    }
  
});